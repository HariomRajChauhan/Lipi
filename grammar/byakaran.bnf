<program> ::= <statement_list>

<statement_list> ::= <statement> ";" <statement_list> | <statement> ";"

<statement> ::= <print_statement>
              | <input_statement>
              | <declaration_statement>
              | <assignment_statement>
              | <if_statement>
              | <while_statement>
              | <for_statement>
              | <function_definition>
              | <return_statement>

<print_statement> ::= "bhana" "(" <expression> ")"

<input_statement> ::= "suna" "(" <identifier> ")"

<declaration_statement> ::= <type> <identifier> "=" <expression>
                          | <type> <identifier>

<type> ::= "purna" | "dasa" | "akshar" | "paath" | "khali"

<assignment_statement> ::= <identifier> "=" <expression>

<if_statement> ::= "yadi" "(" <expression> ")" <block>
                | "yadi" "(" <expression> ")" <block> "anyatha" <block>

<while_statement> ::= "jabasamma" "(" <expression> ")" <block>

<for_statement> ::= "lagi" "(" <assignment_statement> ";" <expression> ";" <assignment_statement> ")" <block>

<function_definition> ::= "kaam" <type> <identifier> "(" <parameter_list> ")" <block>

<return_statement> ::= "firta" <expression>

<block> ::= "{" <statement_list> "}"

<expression> ::= <term> { ("+" | "-" | "*" | "/") <term> }
              | "thik"
              | "bethik"
              | <identifier>
              | <number>
              | <string>
              | <character>
              | <logical_expression>
              | <mod_expression>

<logical_expression> ::= <logical_term> { ("&&" | "||" | "!") <logical_term> }

<logical_term> ::= "(" <logical_expression> ")"
                | "thik"
                | "bethik"
                | <identifier>
                | <comparison>
                | <mod_expression>

<comparison> ::= <expression> ("==" | "!=" | "<" | "<=" | ">" | ">=") <expression>

<mod_expression> ::= <expression> "%" <expression>

<term> ::= <factor> { ("*" | "/") <factor> }

<factor> ::= <identifier>
          | <number>
          | <string>
          | <character>
          | "(" <expression> ")"

<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

<number> ::= [0-9]+ | [0-9]*\.[0-9]+

<string> ::= '"' [^"]* '"'

<character> ::= "'" [^'] "'"